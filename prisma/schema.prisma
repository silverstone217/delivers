generator client {
  provider = "prisma-client-js"
  // output        = "../lib/generated/prisma"
  // binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  tel           String?
  address       String?
  isBanned      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  deliveryCompanies DeliveryCompany[]

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ----------------------------
//  Delivery Company
// ----------------------------
model DeliveryCompany {
  id          String   @id @default(cuid())
  name        String
  description String?
  logo        String?
  contact     Contact?

  zones  Zone[]
  tarifs Tarif[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

// ----------------------------
// üó∫Ô∏è ZONES GEOGRAPHIQUES
// ----------------------------
model Commune {
  id        String     @id @default(cuid())
  name      String
  quartiers Quartier[]

  zoneId String
  zone   Zone   @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quartier {
  id   String @id @default(cuid())
  name String

  communeId String
  commune   Commune @relation(fields: [communeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Zone {
  id       String    @id @default(cuid())
  name     String
  communes Commune[]

  sender   Tarif[] @relation("sender")
  receiver Tarif[] @relation("receiver")

  companyId String
  company   DeliveryCompany @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name])
}

// ----------------------------
//  TARIFS OR RELATIONZ BETWEEN ZONES
// ----------------------------
model Tarif {
  id   String @id @default(cuid())
  name String

  price   Float
  express Boolean @default(false)

  senderId     String
  receiverId   String
  senderZone   Zone   @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverZone Zone   @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  companyId String
  company   DeliveryCompany @relation(fields: [companyId], references: [id], onDelete: Cascade)

  minLength Float @default(0)
  maxLength Float @default(0)
  minWidth  Float @default(0)
  maxWidth  Float @default(0)
  minWeight Float @default(0)
  maxWeight Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Interval {
//   id String @id @default(cuid())

//   minLength Float?
//   maxLength Float?
//   minWidth  Float?
//   maxWidth  Float?
//   minWeight Float?
//   maxWeight Float?

//   price Float

//   tarifId String @unique
//   tarif   Tarif  @relation(fields: [tarifId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// ----------------------------
//  CONTACTS
// ----------------------------
model Contact {
  id       String  @id @default(cuid())
  email    String
  phone    String
  facebook String?
  whatsapp String?
  website  String?

  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deliveryCompanyId String          @unique
  deliveryCompany   DeliveryCompany @relation(fields: [deliveryCompanyId], references: [id], onDelete: Cascade)
}
